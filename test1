#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>
#include <cstdlib>
int main() {
int pipefd[2];
pid_t cpid;
char buf[50];
int status = 0;
char input[20];
char stop[10] = {"stop"};
char report[10] = {"report"};
/*if(argc!= 2)
{
fprintf(stderr, "Usage: %s <string\n", argv[0] );
}
*/
if (pipe(pipefd) == -1)
{
perror("pipe");
exit(1);
}
cpid = fork();
if (cpid == -1)
{
perror("fork");
exit(1);
}
//printf("CPID: %d", getpid());

if(cpid != 0)
{
printf("Kommandant\n");
while (waitpid(cpid, 0, WNOHANG) == 0) {
printf("Befehl eingeben:");
scanf("%s", input );
write(pipefd[1], input, sizeof(input) / sizeof(char));
sleep(1);
}
wait(0);
exit(0);
}
else
{
while (true) 
{
//(cpid == 0) //child reads from pipe
//printf("Prozessmanager\n");
//close(pipefd[1]);
read(pipefd[0], buf, sizeof(buf) / sizeof(char));
if((strcmp(stop, buf)) == 0)
{
printf("exit\n");
//sleep(1);
exit(0);
}
else if((strcmp(report, buf)) == 0)
{
int reportPID = fork();
if(reportPID == 0)
{
printf("Reporter\n");
printf("child: child pid = &%d, parent pid = %d\n", getpid(), getppid());
//sleep(0);
exit(0);
}
else
{
int status;
wait(&status);
printf("Report finished.\n");
}
}
else
{
printf("Befehl hat keine Wirkung: %s\n", buf );
exit(0);
}a
}
}
return 0;
}
